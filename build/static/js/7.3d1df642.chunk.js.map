{"version":3,"sources":["shared/components/UIElements/Card.js","user/pages/Auth.js"],"names":["Card","props","className","style","children","Auth","auth","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","password","formState","inputHandler","setFormData","authSubmitHandler","event","preventDefault","process","JSON","stringify","inputs","responseData","login","userId","token","formData","name","image","Fragment","onClear","asOverlay","onSubmit","element","id","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","onClick","undefined","prevMode"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,4/MCmKEC,UAxJF,WACX,IAAMC,EAAOC,qBAAWC,KACxB,EAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsDC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WAEvC,EAA+CC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,SAAU,CACRF,MAAO,GACPC,SAAS,KAGb,GAXF,mBAAOE,EAAP,KAAkBC,EAAlB,KAAgCC,EAAhC,KAuCMC,EAAiB,uCAAG,WAAOC,GAAP,8EACxBA,EAAMC,kBAEFjB,EAHoB,0CAKOK,EACzBa,0DACA,OACAC,KAAKC,UAAU,CACbZ,MAAOI,EAAUS,OAAOb,MAAMC,MAC9BE,SAAUC,EAAUS,OAAOV,SAASF,QAEtC,CACE,eAAgB,qBAbA,OAKda,EALc,OAgBpB1B,EAAK2B,MAAMD,EAAaE,OAAQF,EAAaG,OAhBzB,iGAoBdC,EAAW,CACflB,MAAOI,EAAUS,OAAOb,MAAMC,MAC9BkB,KAAMf,EAAUS,OAAOM,KAAKlB,MAC5BE,SAAUC,EAAUS,OAAOV,SAASF,MACpCmB,MAAOhB,EAAUS,OAAOO,MAAMnB,OAxBZ,UA0BOJ,EACzBa,2DACA,OACAC,KAAKC,UAAUM,GACf,CACE,eAAgB,qBA/BA,QA0BdJ,EA1Bc,OAmCpB1B,EAAK2B,MAAMD,EAAaE,OAAQF,EAAaG,OAnCzB,oHAAH,sDAwCvB,OACE,kBAAC,IAAMI,SAAP,KACE,kBAAC,IAAD,CAAYzB,MAAOA,EAAO0B,QAASxB,IACnC,kBAAC,IAAD,CAAMd,UAAU,kBACbW,GAAa,kBAAC,IAAD,CAAgB4B,WAAS,IACvC,8CACA,6BACA,0BAAMC,SAAUjB,IACZf,GACA,kBAAC,IAAD,CACEiC,QAAQ,QACRC,GAAG,OACHC,KAAK,OACLC,MAAM,YACNC,WAAY,CAACC,eACbC,UAAU,uBACVC,QAAS3B,KAGXb,GACA,kBAAC,IAAD,CACEiC,QAAQ,QACRC,GAAG,QACHC,KAAK,OACLC,MAAM,iBACNC,WAAY,CAACC,eACbC,UAAU,6BACVC,QAAS3B,IAWb,kBAAC,IAAD,CACEoB,QAAQ,QACRC,GAAG,QACHC,KAAK,QACLC,MAAM,SACNC,WAAY,CAACI,eACbF,UAAU,sCACVC,QAAS3B,IAEX,kBAAC,IAAD,CACEoB,QAAQ,QACRC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNC,WAAY,CAACK,YAAoB,IACjCH,UAAU,wDACVC,QAAS3B,IAEX,kBAAC,IAAD,CAAQsB,KAAK,SAASQ,UAAW/B,EAAUF,SACxCV,EAAc,QAAU,WAG7B,kBAAC,IAAD,CAAQ4C,SAAO,EAACC,QA7HI,WACnB7C,EAUHc,EAAY,2BAELF,EAAUS,QAFN,IAGPM,KAAM,CACJlB,MAAO,GACPC,SAAS,MAGb,GAjBFI,EAAY,2BAELF,EAAUS,QAFN,IAGPM,UAAMmB,EACNlB,WAAOkB,IAETlC,EAAUS,OAAOb,MAAME,SAAWE,EAAUS,OAAOV,SAASD,SAchET,GAAe,SAAC8C,GAAD,OAAeA,OAuG1B,aACa/C,EAAc,SAAW","file":"static/js/7.3d1df642.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport \"./Auth.css\";\r\n\r\nconst Auth = () => {\r\n  const auth = useContext(AuthContext);\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/users/login\",\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    } else {\r\n      try {\r\n        const formData = {\r\n          email: formState.inputs.email.value,\r\n          name: formState.inputs.name.value,\r\n          password: formState.inputs.password.value,\r\n          image: formState.inputs.image.value\r\n        }\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\r\n          \"POST\",\r\n          JSON.stringify(formData),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              element=\"input\"\r\n              id=\"name\"\r\n              type=\"text\"\r\n              label=\"Your Name\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please enter a name.\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {!isLoginMode && (\r\n            <Input\r\n              element=\"input\"\r\n              id=\"image\"\r\n              type=\"text\"\r\n              label=\"Your Image Url\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please enter an image url.\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {/* {!isLoginMode && (\r\n            <ImageUpload\r\n              center\r\n              id=\"image\"\r\n              onInput={inputHandler}\r\n              errorText=\"Please provide an image.\"\r\n            />\r\n          )} */}\r\n          <Input\r\n            element=\"input\"\r\n            id=\"email\"\r\n            type=\"email\"\r\n            label=\"E-Mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter a valid email address.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            element=\"input\"\r\n            id=\"password\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please enter a valid password, at least 6 characters.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModeHandler}>\r\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"],"sourceRoot":""}